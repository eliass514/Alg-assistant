generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum AppointmentSlotStatus {
  AVAILABLE
  FULL
  CANCELLED
}

enum QueueTicketStatus {
  WAITING
  NOTIFIED
  COMPLETED
  CANCELLED
  EXPIRED
}

enum AppointmentStatusEventType {
  BOOKED
  RESCHEDULED
  CANCELLED
}

enum ConversationParticipant {
  CLIENT
  SPECIALIST
  SYSTEM
  AI_ASSISTANT
}

model Role {
  id              String           @id @default(uuid()) @db.Uuid
  name            String           @unique
  description     String?
  users           User[]
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  @@map("roles")
}

model Permission {
  id              String           @id @default(uuid()) @db.Uuid
  key             String           @unique
  description     String?
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  @@map("permissions")
}

model RolePermission {
  roleId       String     @map("role_id") @db.Uuid
  permissionId String     @map("permission_id") @db.Uuid
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now()) @map("created_at")

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model User {
  id               String             @id @default(uuid()) @db.Uuid
  email            String             @unique
  passwordHash     String             @map("password_hash")
  firstName        String             @map("first_name")
  lastName         String             @map("last_name")
  phoneNumber      String?            @map("phone_number")
  locale           String             @default("en")
  roleId           String?            @map("role_id") @db.Uuid
  role             Role?              @relation(fields: [roleId], references: [id], onDelete: SetNull)
  appointments     Appointment[]
  documents        Document[]
  conversationLogs ConversationLog[]
  refreshTokens    RefreshToken[]
  queueTickets     QueueTicket[]
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  tokenHash String   @map("token_hash")
  isRevoked Boolean  @default(false) @map("is_revoked")
  expiresAt DateTime @map("expires_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@map("refresh_tokens")
}

model ServiceCategory {
  id            String                      @id @default(uuid()) @db.Uuid
  slug          String                      @unique
  isActive      Boolean                     @default(true) @map("is_active")
  metadata      Json?
  services      Service[]
  translations  ServiceCategoryTranslation[]
  createdAt     DateTime                    @default(now()) @map("created_at")
  updatedAt     DateTime                    @updatedAt @map("updated_at")

  @@map("service_categories")
}

model Service {
  id                String              @id @default(uuid()) @db.Uuid
  categoryId        String              @map("category_id") @db.Uuid
  slug              String              @unique
  durationMinutes   Int                 @map("duration_minutes")
  price             Decimal             @db.Decimal(10, 2)
  isActive          Boolean             @default(true) @map("is_active")
  metadata          Json?
  category          ServiceCategory     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  translations      ServiceTranslation[]
  appointments      Appointment[]
  appointmentSlots  AppointmentSlot[]
  queueTickets      QueueTicket[]
  documentTemplates DocumentTemplate[]
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")

  @@map("services")
}

model ServiceCategoryTranslation {
  id          String          @id @default(uuid()) @db.Uuid
  categoryId  String          @map("category_id") @db.Uuid
  locale      String
  name        String
  description String?
  metadata    Json?
  category    ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  @@unique([categoryId, locale], map: "service_category_translations_category_locale_key")
  @@map("service_category_translations")
}

model ServiceTranslation {
  id          String   @id @default(uuid()) @db.Uuid
  serviceId   String   @map("service_id") @db.Uuid
  locale      String
  name        String
  summary     String?
  description String?
  metadata    Json?
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([serviceId, locale], map: "service_translations_service_locale_key")
  @@map("service_translations")
}

model AppointmentSlot {
  id                  String                 @id @default(uuid()) @db.Uuid
  serviceId           String                 @map("service_id") @db.Uuid
  startAt             DateTime               @map("start_at")
  endAt               DateTime               @map("end_at")
  timezone            String
  capacity            Int                    @default(1)
  bufferBeforeMinutes Int                    @default(0) @map("buffer_before_minutes")
  bufferAfterMinutes  Int                    @default(0) @map("buffer_after_minutes")
  status              AppointmentSlotStatus  @default(AVAILABLE)
  notes               String?
  metadata            Json?
  service             Service                @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  appointments        Appointment[]
  queueTickets        QueueTicket[]
  createdAt           DateTime               @default(now()) @map("created_at")
  updatedAt           DateTime               @updatedAt @map("updated_at")

  @@index([serviceId, startAt])
  @@map("appointment_slots")
}

model Appointment {
  id               String                    @id @default(uuid()) @db.Uuid
  userId           String                    @map("user_id") @db.Uuid
  serviceId        String                    @map("service_id") @db.Uuid
  slotId           String?                   @map("slot_id") @db.Uuid
  queueTicketId    String?                   @unique @map("queue_ticket_id") @db.Uuid
  scheduledAt      DateTime                  @map("scheduled_at")
  status           AppointmentStatus         @default(SCHEDULED)
  notes            String?
  locale           String                    @default("en")
  timezone         String                    @default("UTC")
  user             User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  service          Service                   @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  slot             AppointmentSlot?          @relation(fields: [slotId], references: [id], onDelete: SetNull)
  queueTicket      QueueTicket?              @relation("QueueAppointment", fields: [queueTicketId], references: [id], onDelete: SetNull)
  documents        Document[]
  conversationLogs ConversationLog[]
  statusHistory    AppointmentStatusHistory[]
  createdAt        DateTime                  @default(now()) @map("created_at")
  updatedAt        DateTime                  @updatedAt @map("updated_at")

  @@map("appointments")
}

model QueueTicket {
  id             String             @id @default(uuid()) @db.Uuid
  userId         String             @map("user_id") @db.Uuid
  serviceId      String             @map("service_id") @db.Uuid
  slotId         String?            @map("slot_id") @db.Uuid
  status         QueueTicketStatus  @default(WAITING)
  position       Int                @default(1)
  desiredFrom    DateTime?          @map("desired_from")
  desiredTo      DateTime?          @map("desired_to")
  timezone       String             @default("UTC")
  notifiedAt     DateTime?          @map("notified_at")
  expiresAt      DateTime?          @map("expires_at")
  notes          String?
  metadata       Json?
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  service        Service            @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  slot           AppointmentSlot?   @relation(fields: [slotId], references: [id], onDelete: SetNull)
  appointment    Appointment?       @relation("QueueAppointment")
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")

  @@index([serviceId, status, createdAt])
  @@map("queue_tickets")
}

model AppointmentStatusHistory {
  id            String                    @id @default(uuid()) @db.Uuid
  appointmentId String                    @map("appointment_id") @db.Uuid
  event         AppointmentStatusEventType
  fromStatus    AppointmentStatus?        @map("from_status")
  toStatus      AppointmentStatus         @map("to_status")
  notes         String?
  metadata      Json?
  appointment   Appointment               @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  createdAt     DateTime                  @default(now()) @map("created_at")

  @@index([appointmentId, createdAt])
  @@map("appointment_status_history")
}

model DocumentTemplate {
  id        String    @id @default(uuid()) @db.Uuid
  serviceId String?   @map("service_id") @db.Uuid
  locale    String    @default("en")
  name      String
  content   String
  metadata  Json?
  service   Service?  @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  documents Document[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("document_templates")
}

model Document {
  id           String            @id @default(uuid()) @db.Uuid
  userId       String            @map("user_id") @db.Uuid
  appointmentId String?          @map("appointment_id") @db.Uuid
  templateId   String?           @map("template_id") @db.Uuid
  locale       String            @default("en")
  title        String
  content      String
  metadata     Json?
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointment  Appointment?      @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  template     DocumentTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")

  @@map("documents")
}

model ConversationLog {
  id            String                   @id @default(uuid()) @db.Uuid
  appointmentId String?                  @map("appointment_id") @db.Uuid
  userId        String?                  @map("user_id") @db.Uuid
  participant   ConversationParticipant  @map("participant_role")
  locale        String                   @default("en")
  message       String
  payload       Json?
  appointment   Appointment?             @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  user          User?                    @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt     DateTime                 @default(now()) @map("created_at")
  updatedAt     DateTime                 @updatedAt @map("updated_at")

  @@map("conversation_logs")
}
