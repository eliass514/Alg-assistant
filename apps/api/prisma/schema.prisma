generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum AppointmentSlotStatus {
  AVAILABLE
  FULL
  CANCELLED
}

enum QueueTicketStatus {
  WAITING
  NOTIFIED
  COMPLETED
  CANCELLED
  EXPIRED
}

enum AppointmentStatusEventType {
  BOOKED
  RESCHEDULED
  CANCELLED
}

enum ConversationParticipant {
  CLIENT
  SPECIALIST
  SYSTEM
  AI_ASSISTANT
}

enum DocumentTemplateVersionStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum DocumentUploadStatus {
  PENDING
  PROCESSING
  VALIDATED
  REJECTED
  CANCELLED
  EXPIRED
}

enum DocumentValidationStatus {
  PASSED
  FAILED
  WARNING
  SKIPPED
}

enum ValidationRuleType {
  REQUIRED
  FILE_TYPE
  FILE_SIZE
  FILE_COUNT
  EXPIRY_DATE
  CUSTOM
}

enum ValidationRuleSeverity {
  ERROR
  WARNING
  INFO
}

model Role {
  id              String           @id @default(uuid()) @db.Uuid
  name            String           @unique
  description     String?
  users           User[]
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  @@map("roles")
}

model Permission {
  id              String           @id @default(uuid()) @db.Uuid
  key             String           @unique
  description     String?
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  @@map("permissions")
}

model RolePermission {
  roleId       String     @map("role_id") @db.Uuid
  permissionId String     @map("permission_id") @db.Uuid
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now()) @map("created_at")

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model User {
  id                          String                        @id @default(uuid()) @db.Uuid
  email                       String                        @unique
  passwordHash                String                        @map("password_hash")
  firstName                   String                        @map("first_name")
  lastName                    String                        @map("last_name")
  phoneNumber                 String?                       @map("phone_number")
  locale                      String                        @default("en")
  roleId                      String?                       @map("role_id") @db.Uuid
  role                        Role?                         @relation(fields: [roleId], references: [id], onDelete: SetNull)
  appointments                Appointment[]
  documents                   Document[]
  documentUploads             DocumentUpload[]
  documentUploadsReviewed     DocumentUpload[]              @relation("DocumentUploadReviewedBy")
  documentUploadStatusChanges DocumentUploadStatusHistory[] @relation("DocumentUploadStatusChangedBy")
  conversationLogs            ConversationLog[]
  refreshTokens               RefreshToken[]
  queueTickets                QueueTicket[]
  createdAt                   DateTime                      @default(now()) @map("created_at")
  updatedAt                   DateTime                      @updatedAt @map("updated_at")

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  tokenHash String   @map("token_hash")
  isRevoked Boolean  @default(false) @map("is_revoked")
  expiresAt DateTime @map("expires_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@map("refresh_tokens")
}

model ServiceCategory {
  id           String                       @id @default(uuid()) @db.Uuid
  slug         String                       @unique
  isActive     Boolean                      @default(true) @map("is_active")
  metadata     Json?
  services     Service[]
  translations ServiceCategoryTranslation[]
  createdAt    DateTime                     @default(now()) @map("created_at")
  updatedAt    DateTime                     @updatedAt @map("updated_at")

  @@map("service_categories")
}

model Service {
  id                          String                    @id @default(uuid()) @db.Uuid
  categoryId                  String                    @map("category_id") @db.Uuid
  slug                        String                    @unique
  durationMinutes             Int                       @map("duration_minutes")
  price                       Decimal                   @db.Decimal(10, 2)
  isActive                    Boolean                   @default(true) @map("is_active")
  metadata                    Json?
  category                    ServiceCategory           @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  translations                ServiceTranslation[]
  appointments                Appointment[]
  appointmentSlots            AppointmentSlot[]
  queueTickets                QueueTicket[]
  documentTemplateAssignments DocumentTemplateService[]
  documentUploads             DocumentUpload[]
  createdAt                   DateTime                  @default(now()) @map("created_at")
  updatedAt                   DateTime                  @updatedAt @map("updated_at")

  @@map("services")
}

model ServiceCategoryTranslation {
  id          String          @id @default(uuid()) @db.Uuid
  categoryId  String          @map("category_id") @db.Uuid
  locale      String
  name        String
  description String?
  metadata    Json?
  category    ServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  @@unique([categoryId, locale], map: "service_category_translations_category_locale_key")
  @@map("service_category_translations")
}

model ServiceTranslation {
  id          String   @id @default(uuid()) @db.Uuid
  serviceId   String   @map("service_id") @db.Uuid
  locale      String
  name        String
  summary     String?
  description String?
  metadata    Json?
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([serviceId, locale], map: "service_translations_service_locale_key")
  @@map("service_translations")
}

model AppointmentSlot {
  id                  String                @id @default(uuid()) @db.Uuid
  serviceId           String                @map("service_id") @db.Uuid
  startAt             DateTime              @map("start_at")
  endAt               DateTime              @map("end_at")
  timezone            String
  capacity            Int                   @default(1)
  bufferBeforeMinutes Int                   @default(0) @map("buffer_before_minutes")
  bufferAfterMinutes  Int                   @default(0) @map("buffer_after_minutes")
  status              AppointmentSlotStatus @default(AVAILABLE)
  notes               String?
  metadata            Json?
  service             Service               @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  appointments        Appointment[]
  queueTickets        QueueTicket[]
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")

  @@index([serviceId, startAt])
  @@map("appointment_slots")
}

model Appointment {
  id               String                     @id @default(uuid()) @db.Uuid
  userId           String                     @map("user_id") @db.Uuid
  serviceId        String                     @map("service_id") @db.Uuid
  slotId           String?                    @map("slot_id") @db.Uuid
  queueTicketId    String?                    @unique @map("queue_ticket_id") @db.Uuid
  scheduledAt      DateTime                   @map("scheduled_at")
  status           AppointmentStatus          @default(SCHEDULED)
  notes            String?
  locale           String                     @default("en")
  timezone         String                     @default("UTC")
  user             User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  service          Service                    @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  slot             AppointmentSlot?           @relation(fields: [slotId], references: [id], onDelete: SetNull)
  queueTicket      QueueTicket?               @relation("QueueAppointment", fields: [queueTicketId], references: [id], onDelete: SetNull)
  documents        Document[]
  documentUploads  DocumentUpload[]
  conversationLogs ConversationLog[]
  statusHistory    AppointmentStatusHistory[]
  createdAt        DateTime                   @default(now()) @map("created_at")
  updatedAt        DateTime                   @updatedAt @map("updated_at")

  @@map("appointments")
}

model QueueTicket {
  id          String            @id @default(uuid()) @db.Uuid
  userId      String            @map("user_id") @db.Uuid
  serviceId   String            @map("service_id") @db.Uuid
  slotId      String?           @map("slot_id") @db.Uuid
  status      QueueTicketStatus @default(WAITING)
  position    Int               @default(1)
  desiredFrom DateTime?         @map("desired_from")
  desiredTo   DateTime?         @map("desired_to")
  timezone    String            @default("UTC")
  notifiedAt  DateTime?         @map("notified_at")
  expiresAt   DateTime?         @map("expires_at")
  notes       String?
  metadata    Json?
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  service     Service           @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  slot        AppointmentSlot?  @relation(fields: [slotId], references: [id], onDelete: SetNull)
  appointment Appointment?      @relation("QueueAppointment")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  @@index([serviceId, status, createdAt])
  @@map("queue_tickets")
}

model AppointmentStatusHistory {
  id            String                     @id @default(uuid()) @db.Uuid
  appointmentId String                     @map("appointment_id") @db.Uuid
  event         AppointmentStatusEventType
  fromStatus    AppointmentStatus?         @map("from_status")
  toStatus      AppointmentStatus          @map("to_status")
  notes         String?
  metadata      Json?
  appointment   Appointment                @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  createdAt     DateTime                   @default(now()) @map("created_at")

  @@index([appointmentId, createdAt])
  @@map("appointment_status_history")
}

model DocumentTemplate {
  id            String                    @id @default(uuid()) @db.Uuid
  slug          String                    @unique
  name          String
  description   String?
  defaultLocale String                    @default("en") @map("default_locale")
  isActive      Boolean                   @default(true) @map("is_active")
  metadata      Json?
  versions      DocumentTemplateVersion[]
  services      DocumentTemplateService[]
  documents     Document[]
  uploads       DocumentUpload[]
  createdAt     DateTime                  @default(now()) @map("created_at")
  updatedAt     DateTime                  @updatedAt @map("updated_at")

  @@map("document_templates")
}

model DocumentTemplateVersion {
  id              String                        @id @default(uuid()) @db.Uuid
  templateId      String                        @map("template_id") @db.Uuid
  versionNumber   Int                           @map("version_number")
  label           String?
  status          DocumentTemplateVersionStatus @default(DRAFT)
  content         String
  changeLog       String?                       @map("change_log")
  checksum        String?                       @unique
  publishedAt     DateTime?                     @map("published_at")
  retiredAt       DateTime?                     @map("retired_at")
  metadata        Json?
  template        DocumentTemplate              @relation(fields: [templateId], references: [id], onDelete: Cascade)
  validationRules ValidationRule[]
  uploads         DocumentUpload[]
  documents       Document[]
  createdAt       DateTime                      @default(now()) @map("created_at")
  updatedAt       DateTime                      @updatedAt @map("updated_at")

  @@unique([templateId, versionNumber], map: "document_template_versions_template_version_key")
  @@map("document_template_versions")
}

model DocumentTemplateService {
  id         String           @id @default(uuid()) @db.Uuid
  templateId String           @map("template_id") @db.Uuid
  serviceId  String           @map("service_id") @db.Uuid
  isRequired Boolean          @default(false) @map("is_required")
  autoApply  Boolean          @default(false) @map("auto_apply")
  validFrom  DateTime?        @map("valid_from")
  validTo    DateTime?        @map("valid_to")
  metadata   Json?
  template   DocumentTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  service    Service          @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  createdAt  DateTime         @default(now()) @map("created_at")
  updatedAt  DateTime         @updatedAt @map("updated_at")

  @@unique([templateId, serviceId], map: "document_template_services_template_service_key")
  @@index([serviceId], map: "document_template_services_service_idx")
  @@map("document_template_services")
}

model ValidationRule {
  id                String                     @id @default(uuid()) @db.Uuid
  templateVersionId String                     @map("template_version_id") @db.Uuid
  type              ValidationRuleType
  severity          ValidationRuleSeverity     @default(ERROR)
  config            Json
  message           String?
  isActive          Boolean                    @default(true) @map("is_active")
  order             Int                        @default(0)
  templateVersion   DocumentTemplateVersion    @relation(fields: [templateVersionId], references: [id], onDelete: Cascade)
  validations       DocumentUploadValidation[]
  createdAt         DateTime                   @default(now()) @map("created_at")
  updatedAt         DateTime                   @updatedAt @map("updated_at")

  @@map("validation_rules")
}

model DocumentUpload {
  id                String                        @id @default(uuid()) @db.Uuid
  userId            String                        @map("user_id") @db.Uuid
  serviceId         String?                       @map("service_id") @db.Uuid
  appointmentId     String?                       @map("appointment_id") @db.Uuid
  templateId        String?                       @map("template_id") @db.Uuid
  templateVersionId String?                       @map("template_version_id") @db.Uuid
  reviewedById      String?                       @map("reviewed_by_id") @db.Uuid
  status            DocumentUploadStatus          @default(PENDING)
  storagePath       String                        @map("storage_path")
  originalFilename  String                        @map("original_filename")
  mimeType          String                        @map("mime_type")
  fileSize          Int?                          @map("file_size")
  checksum          String?                       @map("checksum")
  submittedAt       DateTime                      @default(now()) @map("submitted_at")
  reviewedAt        DateTime?                     @map("reviewed_at")
  expiresAt         DateTime?                     @map("expires_at")
  rejectionReason   String?                       @map("rejection_reason")
  metadata          Json?
  user              User                          @relation(fields: [userId], references: [id], onDelete: Cascade)
  service           Service?                      @relation(fields: [serviceId], references: [id], onDelete: SetNull)
  appointment       Appointment?                  @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  template          DocumentTemplate?             @relation(fields: [templateId], references: [id], onDelete: SetNull)
  templateVersion   DocumentTemplateVersion?      @relation(fields: [templateVersionId], references: [id], onDelete: SetNull)
  reviewedBy        User?                         @relation("DocumentUploadReviewedBy", fields: [reviewedById], references: [id], onDelete: SetNull)
  validations       DocumentUploadValidation[]
  statusHistory     DocumentUploadStatusHistory[]
  createdAt         DateTime                      @default(now()) @map("created_at")
  updatedAt         DateTime                      @updatedAt @map("updated_at")

  @@index([userId, status], map: "document_uploads_user_status_idx")
  @@index([serviceId, templateId], map: "document_uploads_service_template_idx")
  @@index([templateVersionId], map: "document_uploads_template_version_idx")
  @@map("document_uploads")
}

model DocumentUploadStatusHistory {
  id          String                @id @default(uuid()) @db.Uuid
  uploadId    String                @map("upload_id") @db.Uuid
  changedById String?               @map("changed_by_id") @db.Uuid
  fromStatus  DocumentUploadStatus? @map("from_status")
  toStatus    DocumentUploadStatus  @map("to_status")
  reason      String?
  metadata    Json?
  upload      DocumentUpload        @relation(fields: [uploadId], references: [id], onDelete: Cascade)
  changedBy   User?                 @relation("DocumentUploadStatusChangedBy", fields: [changedById], references: [id], onDelete: SetNull)
  createdAt   DateTime              @default(now()) @map("created_at")

  @@index([uploadId, createdAt], map: "document_upload_status_history_upload_created_idx")
  @@map("document_upload_status_history")
}

model DocumentUploadValidation {
  id         String                   @id @default(uuid()) @db.Uuid
  uploadId   String                   @map("upload_id") @db.Uuid
  ruleId     String?                  @map("rule_id") @db.Uuid
  status     DocumentValidationStatus @default(PASSED)
  message    String?
  metadata   Json?
  executedAt DateTime                 @default(now()) @map("executed_at")
  upload     DocumentUpload           @relation(fields: [uploadId], references: [id], onDelete: Cascade)
  rule       ValidationRule?          @relation(fields: [ruleId], references: [id], onDelete: SetNull)
  createdAt  DateTime                 @default(now()) @map("created_at")
  updatedAt  DateTime                 @updatedAt @map("updated_at")

  @@index([uploadId], map: "document_upload_validations_upload_idx")
  @@map("document_upload_validations")
}

model Document {
  id                String                   @id @default(uuid()) @db.Uuid
  userId            String                   @map("user_id") @db.Uuid
  appointmentId     String?                  @map("appointment_id") @db.Uuid
  templateId        String?                  @map("template_id") @db.Uuid
  templateVersionId String?                  @map("template_version_id") @db.Uuid
  locale            String                   @default("en")
  title             String
  content           String
  metadata          Json?
  user              User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointment       Appointment?             @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  template          DocumentTemplate?        @relation(fields: [templateId], references: [id], onDelete: SetNull)
  templateVersion   DocumentTemplateVersion? @relation(fields: [templateVersionId], references: [id], onDelete: SetNull)
  createdAt         DateTime                 @default(now()) @map("created_at")
  updatedAt         DateTime                 @updatedAt @map("updated_at")

  @@index([templateId], map: "documents_template_idx")
  @@index([templateVersionId], map: "documents_template_version_idx")
  @@map("documents")
}

model ConversationLog {
  id            String                  @id @default(uuid()) @db.Uuid
  appointmentId String?                 @map("appointment_id") @db.Uuid
  userId        String?                 @map("user_id") @db.Uuid
  participant   ConversationParticipant @map("participant_role")
  locale        String                  @default("en")
  message       String
  payload       Json?
  appointment   Appointment?            @relation(fields: [appointmentId], references: [id], onDelete: SetNull)
  user          User?                   @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt     DateTime                @default(now()) @map("created_at")
  updatedAt     DateTime                @updatedAt @map("updated_at")

  @@map("conversation_logs")
}
