# ==============================================================================
# DEVELOPMENT ENVIRONMENT CONFIGURATION
# ==============================================================================
# This file contains example values for local development.
# Copy this file to `.env` and adjust values as needed.
#
# SECURITY WARNING: Never commit real secrets to version control!
# ==============================================================================

# ------------------------------------------------------------------------------
# Application Environment
# ------------------------------------------------------------------------------
NODE_ENV=development

# ------------------------------------------------------------------------------
# Service Ports (Local Development)
# ------------------------------------------------------------------------------
FRONTEND_PORT=3000
BACKEND_PORT=3001
PROXY_PORT=8080

# ------------------------------------------------------------------------------
# API URLs
# ------------------------------------------------------------------------------
# Server-side API URL (used by Next.js SSR, Docker service-to-service)
# In Docker Compose, services communicate using service names
API_BASE_URL=http://backend:3000/api

# Client-side API URL (used by browser)
# For local dev without Docker: http://localhost:3001/api
# For local dev with Docker: http://localhost:8080/api (through nginx proxy)
NEXT_PUBLIC_API_BASE_URL=http://localhost:8080/api

# ------------------------------------------------------------------------------
# PostgreSQL Database (Development)
# ------------------------------------------------------------------------------
POSTGRES_USER=acme
POSTGRES_PASSWORD=acme123
POSTGRES_DB=acme_dev
POSTGRES_PORT=5432

# Database connection URL for the API
# For local development without Docker: postgresql://acme:acme123@localhost:5432/acme_dev
# For Docker Compose: use service name 'db' instead of 'localhost'
DATABASE_URL=postgresql://acme:acme123@db:5432/acme_dev

# ------------------------------------------------------------------------------
# PostgreSQL Database (Test)
# ------------------------------------------------------------------------------
# Separate database for running tests
POSTGRES_TEST_USER=acme
POSTGRES_TEST_PASSWORD=acme123
POSTGRES_TEST_DB=acme_test
POSTGRES_TEST_PORT=5433
TEST_DATABASE_URL=postgresql://acme:acme123@localhost:5433/acme_test

# ------------------------------------------------------------------------------
# JWT Authentication
# ------------------------------------------------------------------------------
# SECURITY: Generate secure secrets for production!
# Example: openssl rand -base64 32
JWT_ACCESS_TOKEN_SECRET=dev-access-secret-change-in-production
JWT_ACCESS_TOKEN_EXPIRES_IN=900

JWT_REFRESH_TOKEN_SECRET=dev-refresh-secret-change-in-production
JWT_REFRESH_TOKEN_EXPIRES_IN=604800

JWT_AUDIENCE=acme.api
JWT_ISSUER=acme.api

# ------------------------------------------------------------------------------
# Password Hashing
# ------------------------------------------------------------------------------
# Number of bcrypt salt rounds (10 is fine for development, 12+ for production)
BCRYPT_SALT_ROUNDS=10

# ------------------------------------------------------------------------------
# User Management
# ------------------------------------------------------------------------------
# Default role assigned to newly registered users
DEFAULT_USER_ROLE=client

# ------------------------------------------------------------------------------
# AWS S3 Storage (Development with MinIO)
# ------------------------------------------------------------------------------
# For local development, use MinIO as an S3-compatible service
# Start MinIO: docker run -p 9000:9000 -p 9001:9001 \
#   -e MINIO_ROOT_USER=minioadmin -e MINIO_ROOT_PASSWORD=minioadmin \
#   minio/minio server /data --console-address ":9001"

AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=minioadmin
AWS_SECRET_ACCESS_KEY=minioadmin
AWS_S3_BUCKET_NAME=uploads

# MinIO local endpoint (remove or leave empty for real AWS S3)
AWS_S3_ENDPOINT=http://localhost:9000

# Use path-style URLs for MinIO (true) vs virtual-hosted-style for AWS (false)
AWS_S3_FORCE_PATH_STYLE=true

# Presigned URL expiration time in seconds (1 hour)
S3_PRESIGNED_URL_EXPIRATION=3600

# ------------------------------------------------------------------------------
# LLM Provider Configuration
# ------------------------------------------------------------------------------
# Provider type: 'mock' | 'openai' | 'anthropic' | 'azure'
LLM_PROVIDER=mock

# Default locale for LLM responses
LLM_DEFAULT_LOCALE=en

# Supported locales (comma-separated)
LLM_SUPPORTED_LOCALES=en,fr,ar

# Maximum prompt length in characters
LLM_MAX_PROMPT_LENGTH=1200

# Maximum number of context messages to include
LLM_MAX_CONTEXT_MESSAGES=25

# Blocked phrases for content moderation (comma-separated)
# Example: LLM_GUARDRAILS_BLOCKED=spam,abuse,violence
LLM_GUARDRAILS_BLOCKED=

# ------------------------------------------------------------------------------
# LLM Provider API Keys (if not using mock)
# ------------------------------------------------------------------------------
# Uncomment and set based on your provider

# OpenAI
# OPENAI_API_KEY=sk-...
# OPENAI_ORG_ID=org-...
# OPENAI_MODEL=gpt-4-turbo-preview

# Anthropic
# ANTHROPIC_API_KEY=sk-ant-...
# ANTHROPIC_MODEL=claude-3-opus-20240229

# Azure OpenAI
# AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com/
# AZURE_OPENAI_API_KEY=...
# AZURE_OPENAI_DEPLOYMENT_NAME=gpt-4

# ------------------------------------------------------------------------------
# Optional: Additional Development Tools
# ------------------------------------------------------------------------------
# Uncomment if needed

# Logging
# LOG_LEVEL=debug

# API Configuration
# APP_NAME=Acme API (Development)
# GLOBAL_PREFIX=api

# CORS Origins (comma-separated)
# CORS_ORIGINS=http://localhost:3000,http://localhost:8080

# Rate Limiting
# RATE_LIMIT_TTL=60
# RATE_LIMIT_MAX=100
